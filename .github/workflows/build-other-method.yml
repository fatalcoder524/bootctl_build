name: Build bootctl with AIDL (arm64 + armeabi-v7a)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - { abi: arm64-v8a, triple: aarch64-linux-android, api: 29 }
          - { abi: armeabi-v7a, triple: armv7a-linux-androideabi, api: 29 }

    env:
      NDK_VERSION: r26d
      ANDROID_HOME: /usr/local/lib/android/sdk

    steps:
      - name: Checkout bootctl sources
        run: |
          mkdir -p aosp && cd aosp
          git clone --depth=1 https://android.googlesource.com/platform/system/core system/core
          git clone --depth=1 https://android.googlesource.com/platform/system/extras system/extras
          git clone --depth=1 https://android.googlesource.com/platform/system/libbase system/libbase
          git clone --depth=1 https://android.googlesource.com/platform/hardware/interfaces hardware/interfaces
          git clone --depth=1 https://android.googlesource.com/platform/frameworks/native native
          git clone --depth=1 https://android.googlesource.com/platform/system/libhidl aosp/system/libhidl
          git clone --depth=1 https://android.googlesource.com/platform/system/libhwbinder aosp/system/libhwbinder

          rm -rf hardware/interfaces/compatibility_matrices
          # android.hidl.base@1.0
          mkdir -p hardware/interfaces/hidl/base/1.0
          cp -r aosp/system/libhidl/transport/base/1.0 hardware/interfaces/hidl/base/1.0
          
          # android.hidl.manager@1.0 (optional but commonly needed)
          mkdir -p hardware/interfaces/hidl/manager/1.0
          cp -r aosp/system/libhidl/transport/manager/1.0 hardware/interfaces/hidl/manager/1.0
          # mkdir -p hardware/interfaces/hidl/types/1.0
          # # minimal types.hal for android.hidl.types
          # cat <<EOF > hardware/interfaces/hidl/types/1.0/types.hal
          # package android.hidl.types@1.0;
          # enum Status : int32_t { OK, NOT_SUPPORTED, UNKNOWN_ERROR };
          # EOF


      - name: Setup Android SDK + AIDL
        run: |
          echo "AIDL=$ANDROID_HOME/build-tools/35.0.1/aidl" >> $GITHUB_ENV

      - name: Download Android NDK
        run: |
          curl -LO https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip
          unzip -q android-ndk-${NDK_VERSION}-linux.zip
          echo "NDK_DIR=$PWD/android-ndk-${NDK_VERSION}" >> $GITHUB_ENV

      - name: Generate AIDL interface (android.hardware.boot)
        run: |
          OUT_CPP=out/aidl_gen/cpp
          OUT_HDR=out/aidl_gen/include
          mkdir -p "$OUT_CPP" "$OUT_HDR"
          for file in aosp/hardware/interfaces/boot/aidl/android/hardware/boot/*.aidl; do
            $AIDL \
              --lang=ndk \
              --structured \
              --stability=vintf \
              -I aosp/hardware/interfaces/boot/aidl \
              -o "$OUT_CPP" \
              -h "$OUT_HDR" \
              "$file"
          done
          
          tree out/aidl_gen

      # - name: Build libbinder_ndk
        # run: |
          # export NDK=$PWD/android-ndk-${NDK_VERSION}
          # mkdir -p out/binder_ndk
          # cd aosp/native/libs/binder/ndk
          # mkdir build && cd build
          # cmake .. \
            # -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake \
            # -DANDROID_ABI=${{ matrix.arch.abi }} \
            # -DANDROID_PLATFORM=android-${{ matrix.arch.api }} \
            # -DBUILD_SHARED_LIBS=OFF
          # make -j$(nproc)
          # cp libbinder_ndk.a ../../../../../../out/binder_ndk/

      # - name: Build hidl-gen from source
        # env:
          # ARCH: ${{ matrix.arch.abi == 'arm64-v8a' && 'arm64' || 'arm' }}
        # run: |
          # git clone --depth=1 https://android.googlesource.com/platform/system/tools/hidl aosp/system/tools/hidl
          # git clone --depth=1 https://android.googlesource.com/platform/system/logging aosp/system/logging
          # git clone --depth=1 https://android.googlesource.com/platform/system/libhidl aosp/system/libhidl
          # git clone --depth=1 https://android.googlesource.com/platform/build/soong aosp/build/soong
          # git clone --depth=1 https://android.googlesource.com/platform/build/blueprint aosp/build/blueprint
          # git clone --depth=1 https://android.googlesource.com/platform/build aosp/build/make
          # git clone --depth=1 https://android.googlesource.com/platform/prebuilts/go/linux-x86 aosp/prebuilts/go/linux-x86
          # git clone --depth=1 https://android.googlesource.com/platform/external/go-cmp aosp/external/go-cmp
          # git clone --depth=1 https://android.googlesource.com/platform/external/golang-protobuf aosp/external/golang-protobuf
          # git clone --depth=1 https://android.googlesource.com/platform/external/starlark-go aosp/external/starlark-go
          # git clone --depth=1 https://android.googlesource.com/platform/prebuilts/build-tools aosp/prebuilts/build-tools
          # git clone --depth=1 https://android.googlesource.com/platform/build/release aosp/build/release
          # git clone --depth=1 https://android.googlesource.com/platform/prebuilts/vndk/v30/ aosp/prebuilts/vndk/v30
          # git clone --depth=1 https://android.googlesource.com/platform/prebuilts/vndk/v31/ aosp/prebuilts/vndk/v31
          # git clone --depth=1 https://android.googlesource.com/platform/prebuilts/vndk/v32/ aosp/prebuilts/vndk/v32
          # git clone --depth=1 https://android.googlesource.com/platform/prebuilts/vndk/v33/ aosp/prebuilts/vndk/v33
          # git clone --depth=1 https://android.googlesource.com/platform/prebuilts/vndk/v34/ aosp/prebuilts/vndk/v34
          # git clone --depth=1 https://android.googlesource.com/toolchain/pgo-profiles aosp/toolchain/pgo-profiles
          
          # export TARGET_PRODUCT=aosp_${ARCH}
          # export TARGET_RELEASE=aosp_current
          # mkdir -p out
          # cd aosp/build/soong
          # # Build only Soong, no envsetup
          # ./soong_ui.bash --make-mode --soong-only
          # cd ../../system/tools/hidl
          # ../../../build/soong/soong_ui.bash --make-mode hidl-gen
          # cp ../../out/soong/host/linux-x86/bin/hidl-gen ../../../tools/hidl-gen
          
          # sudo apt-get install -y clang cmake ninja-build
          # cd aosp/system/tools/hidl
          # mkdir -p out && cd out
          # cmake -G Ninja .. && ninja
          # cp hidl-gen ../../../../tools/hidl-gen

      # - name: Download prebuilt hidl-gen binary
        # run: |
          # mkdir -p tools/lib
          # curl -Lo tools/hidl-gen https://android.googlesource.com/platform/prebuilts/build-tools/+/refs/heads/main/linux-x86/bin/hidl-gen?format=TEXT
          # base64 -d tools/hidl-gen > tools/hidl-gen.bin
          # mv tools/hidl-gen.bin tools/hidl-gen
          # chmod +x tools/hidl-gen
          # for lib in libc++.so libbase.so; do
            # curl -Lo tools/lib/$lib.b64 "https://android.googlesource.com/platform/prebuilts/build-tools/+/refs/heads/main/linux-x86/lib64/$lib?format=TEXT"
            # base64 -d tools/lib/$lib.b64 > tools/lib/$lib
          # done

      # - name: Generate HIDL headers (android.hardware.boot@1.0 - 1.2)
        # run: |
          # export LD_LIBRARY_PATH=$PWD/tools/lib
          # mkdir -p out/hidl_gen
          
          # for version in 1.0 1.1 1.2; do
            # tools/hidl-gen -o out/hidl_gen \
            # -Lc++-headers \
            # -r android.hardware:aosp/hardware/interfaces \
            # -r android.hidl:aosp/hardware/interfaces/hidl \
            # android.hardware.boot@$version
          # done

      - name: Build bootctl binary
        run: |
          export NDK_DIR=$PWD/android-ndk-${NDK_VERSION}
          export PATH=$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          export CC=${{ matrix.arch.triple }}${{ matrix.arch.api }}-clang++
          export SYSROOT=$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          
          SRC="aosp/system/extras/bootctl/bootctl.cpp \
            out/aidl_gen/cpp/android/hardware/boot/IBootControl.cpp \
            out/aidl_gen/cpp/android/hardware/boot/MergeStatus.cpp"
          AIDL_GEN=out/aidl_gen/include
          
          INCLUDES="
            -Iaosp/system/libbase/include \
            -Iaosp/system/core/include \
            -Iaosp/system/core/fs_mgr/include \
            -Iaosp/system/core/bootctrl/include \
            -Iaosp/system/core/bootloader_message/include \
            -Iaosp/system/core/healthd/include \
            -Iaosp/system/libutils/include \
            -Iaosp/system/extras/bootctl \
            -Iaosp/hardware/interfaces/boot/1.0 \
            -Iaosp/hardware/interfaces/boot/1.1 \
            -Iaosp/hardware/interfaces/boot/1.2 \
            -Iaosp/hardware/interfaces/boot/aidl/android/hardware/boot \
            -I$AIDL_GEN \
            -Iout/hidl_gen
          "
          
          sed -i 's|#include <BootControlClient.h>|#include <aidl/android/hardware/boot/BnBootControl.h>|' "aosp/system/extras/bootctl/bootctl.cpp"
          sed -i 's|#include <android/hardware/boot/1.2/IBootControl.h>|#include <aidl/android/hardware/boot/IBootControl.h>|' "aosp/system/extras/bootctl/bootctl.cpp"
          
          $CC $SRC -o bootctl-${{ matrix.arch.abi }} $INCLUDES -Wall -Werror \
            -llog -lcutils -landroid -ldl \
            # out/binder_ndk/libbinder_ndk.a

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bootctl-${{ matrix.arch.abi }}
          path: bootctl-${{ matrix.arch.abi }}
