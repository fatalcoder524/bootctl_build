name: Build bootctl for arm64 and arm

on:
  # push:
    # branches:
      # - main
  # pull_request:
    # branches:
      # - main
  workflow_dispatch:

jobs:
  build-bootctl:
    name: Build bootctl for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - arm64
          - arm

    steps:
      - name: Setup Build System
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          df -h
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
          sudo docker image prune --all --force
          echo "some directories deleted"
          
          # Remove large unwanted packages
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org microsoft-edge-stable || true
          
          # Regex-based purges (for bulk families like mysql, php, dotnet)
          sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
          
          # Clean up
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          echo "some packages purged"
          
          df -h

      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Repo Tool
        run: |
          mkdir -p ./git-repo
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Initialize and Sync AOSP
        run: |
          mkdir android-bootctl
          cd android-bootctl
          $REPO init --depth=1 --u https://android.googlesource.com/platform/manifest -b build-tools --repo-rev=v2.16
          cp ../local_manifest.xml ./.repo/manifests/default.xml
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast --no-clone-bundle

      # - name: Build bootctl with Soong Directly
        # run: |
          # cd android-bootctl
          # ls -la .
          # ls -la ./build
          # ls -la ./build/soong
          # cd system/extras/bootctl
          # ../../../build/soong/soong_ui.bash --make-mode TARGET_ARCH=${{ matrix.arch }} bootctl

      - name: Source envsetup.sh and Build bootctl with mma
        run: |
          cd android-bootctl
          # tree .
          # ls -la ./build
          source ./build/envsetup.sh
          # if [ "${{ matrix.arch }}" == "arm64" ]; then
            # lunch aosp_arm64-eng
          # else
            # lunch aosp_arm-eng
          # fi
          cd system/extras/bootctl
          export TARGET_RELEASE=U
          export TARGET_VNDK_VERSION=34
          export DISABLE_PGO=true
          mma -j$(nproc) bootctl TARGET_ARCH=${{ matrix.arch }} 

      - name: Archive Built Binary
        uses: actions/upload-artifact@v4
        with:
          name: bootctl-${{ matrix.arch }}
          path: |
            android-bootctl/out/target/product/generic${{ matrix.arch }}/obj/EXECUTABLES/bootctl_intermediates/LINKED_${{ matrix.arch }}/bootctl